---
title: "lab10"
author: "Michelle Hernandez"
format:
  html:
    embed-resources: true
editor: visual
---

## Setup

```{r}

library(RSQLite)
library(DBI)

# Initialize a temporary in memory database
con <- dbConnect(SQLite(), ":memory:")

# Download tables
actor <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/actor.csv")
rental <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/rental.csv")
customer <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/customer.csv")
payment <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/payment_p2007_01.csv")

# Copy data.frames to database
dbWriteTable(con, "actor", actor)
dbWriteTable(con, "rental", rental)
dbWriteTable(con, "customer", customer)
dbWriteTable(con, "payment", payment)
dbListTables(con)

```

## Exercise 1

Edit the code below to retrieve the actor ID, first name and last name for all actors using the `actor` table. Sort by last name and then by first name (note that the code chunk below is set up to run SQL code rather than R code).

```{r}
ans <- dbGetQuery(con,
  "SELECT actor_id, first_name, last_name
FROM actor
ORDER BY actor_id
  ")
head(ans)
```

## Exercise 2

Retrieve the actor ID, first name, and last name for actors whose last name equals 'WILLIAMS' or 'DAVIS'.

```{r}
ans2 <- dbGetQuery(con,
  "SELECT actor_id, first_name, last_name
FROM actor
WHERE last_name IN ('WILLIAMS', 'DAVIS')
  ")
ans2
```

## Exercise 3

Write a query against the `rental` table that returns the IDs of the customers who rented a film on July 5, 2005 (use the rental.rental_date column, and you can use the `date()` function to ignore the time component). Include a single row for each distinct customer ID.

## didn't use distinct here, what is it for?, customer id

```{r}
ans3 <- dbGetQuery(con,
  "SELECT DISTINCT customer_id, rental_id, rental_date
FROM rental
WHERE date(rental_date) = '2005-07-05'
  ")
head(ans3)

```

## Exercise 4

### **Exercise 4.1**

Construct a query that retrieves all rows from the `payment` table where the amount is either 1.99, 7.99, 9.99.

```{r}
ans4 <- dbGetQuery(con,
  "SELECT payment_id, customer_id, staff_id, rental_id, amount, payment_date
FROM payment
WHERE amount IN ('1.99', '7.99', '9.99')
  ")
head(ans4)

```

### **Exercise 4.2**

Construct a query that retrieves all rows from the `payment` table where the amount is greater then 5.

```{r}
ans42 <- dbGetQuery(con,
  "SELECT payment_id, customer_id, staff_id, rental_id, amount, payment_date
FROM payment
WHERE amount > 5
  ")
head(ans42)
```

### **Exercise 4.3**

Construct a query that retrieves all rows from the `payment` table where the amount is greater then 5 and less then 8.

```{r}
ans43 <- dbGetQuery(con,
  "SELECT payment_id, customer_id, staff_id, rental_id, amount, payment_date
FROM payment
WHERE amount > 5 AND amount < 8
  ")
head(ans43)
```

## Exercise 5

Retrieve all the payment IDs and their amounts from the customers whose last name is 'DAVIS'.

```{r}
ans5 <- dbGetQuery(con,
  "SELECT a.payment_id, a.amount
FROM payment AS a INNER JOIN customer AS b
  WHERE b.last_name = 'DAVIS'
  ")
head(ans5)
```

## Exercise 6

### **Exercise 6.1**

Use `COUNT(*)` to count the number of rows in `rental`.

```{r}
ans6 <- dbGetQuery(con,
  "SELECT COUNT(*) AS count
  FROM rental
  ")
ans6
```

### **Exercise 6.2**

Use `COUNT(*)` and `GROUP BY` to count the number of rentals for each `customer_id`.

```{r}
ans62 <- dbGetQuery(con,
  "SELECT customer_id,
  COUNT(*) AS count
  FROM rental
  GROUP BY customer_id
  ")
head(ans62)
```

### **Exercise 6.3**

Repeat the previous query and sort by the count in descending order.

```{r}
ans63 <- dbGetQuery(con,
  "SELECT customer_id,
  COUNT(*) AS count
  FROM rental
  GROUP BY customer_id
  ORDER BY count DESC
  ")
head(ans63)
```

### **Exercise 6.4**

Repeat the previous query but use `HAVING` to only keep the groups with 40 or more.

```{r}
ans64 <- dbGetQuery(con,
  "SELECT customer_id,
  COUNT(*) AS count
  FROM rental
  GROUP BY customer_id
  HAVING count > 40
  ORDER BY count DESC
  ")
ans64

```

## Exercise 7

## not sure what is needed here? summary stats, amount & then by customer ID

Write a query that calculates a number of summary statistics for the payment table using `MAX`, `MIN`, `AVG` and `SUM`

```{r}
ans7 <- dbGetQuery(con,
  "SELECT 
  
  MAX(amount) AS max_amount,
  MIN(amount) AS min_amount,
  
  AVG(amount) AS avg_amount,
  SUM(amount) AS total_amount
  
  FROM payment
  ")
ans7
```

### **Exercise 7.1**

Modify the above query to do those calculations for each `customer_id`.

```{r}
ans71 <- dbGetQuery(con,
  "SELECT customer_id,
  
  MIN(amount) AS min_payment,
  MAX(amount) AS max_payment,
  
  AVG(amount) AS avg_amount,
  SUM(amount) AS total_amount

  FROM payment
  GROUP BY customer_id
  ")
head(ans71)
```

### **Exercise 7.2**

Modify the above query to only keep the `customer_id`s that have more then 5 payments.

```{r}

ans72 <- dbGetQuery(con,
  "SELECT customer_id,
  
  MIN(amount) AS min_payment,
  MAX(amount) AS max_payment,
  
  AVG(amount) AS avg_amount,
  SUM(amount) AS total_amount

  FROM payment
  GROUP BY customer_id
  HAVING COUNT(payment_id) > 5 
  ")
head(ans72)
```

## clean up

```{r}
# clean up
dbDisconnect(con)
```
